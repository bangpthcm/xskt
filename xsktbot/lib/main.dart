// lib/main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'app.dart';
import 'data/services/storage_service.dart';
import 'data/services/google_sheets_service.dart';
import 'data/services/rss_parser_service.dart';
import 'data/services/analysis_service.dart';
import 'data/services/betting_table_service.dart';
import 'data/services/telegram_service.dart';
import 'data/models/app_config.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // ‚úÖ Kh·ªüi t·∫°o WebView Platform
  //if (WebViewPlatform.instance == null) {
  //  WebViewPlatform.instance = AndroidWebViewController.platform;
  //}
  
  // Initialize services
  final storageService = StorageService();
  final sheetsService = GoogleSheetsService();
  final rssService = RssParserService();
  final analysisService = AnalysisService();
  final bettingService = BettingTableService();
  final telegramService = TelegramService();

  // ‚úÖ Load config v√† kh·ªüi t·∫°o services T·ª∞ ƒê·ªòNG
  try {
    print('üöÄ Starting app initialization...');
    
    // Load config t·ª´ storage
    var config = await storageService.loadConfig();
    
    // ‚úÖ N·∫øu ch∆∞a c√≥ config, t·∫°o default config
    if (config == null) {
      print('‚ö†Ô∏è No config found, creating default config...');
      config = AppConfig.defaultConfig();
      await storageService.saveConfig(config);
      print('‚úÖ Default config saved');
    } else {
      print('‚úÖ Config loaded from storage');
    }
    
    // ‚úÖ Kh·ªüi t·∫°o Google Sheets
    print('üîÑ Initializing Google Sheets...');
    await sheetsService.initialize(config.googleSheets);
    final isConnected = await sheetsService.testConnection();
    
    if (isConnected) {
      print('‚úÖ Google Sheets connected successfully');
    } else {
      print('‚ùå Google Sheets connection failed');
    }
    
    // ‚úÖ Kh·ªüi t·∫°o v√† test Telegram
    print('üîÑ Initializing Telegram...');
    telegramService.initialize(config.telegram);
    final isTelegramConnected = await telegramService.testConnection();

    if (isTelegramConnected) {
      print('‚úÖ Telegram connected successfully');
    } else {
      print('‚ö†Ô∏è Telegram connection failed (check bot token)');
    }
    
    print('‚úÖ App initialization completed');
    
  } catch (e) {
    print('‚ùå Error initializing services: $e');
    // ‚úÖ N·∫øu l·ªói, v·∫´n ch·∫°y app nh∆∞ng v·ªõi default config
    final defaultConfig = AppConfig.defaultConfig();
    try {
      await sheetsService.initialize(defaultConfig.googleSheets);
      telegramService.initialize(defaultConfig.telegram);
      print('‚ö†Ô∏è Using default config due to initialization error');
    } catch (e2) {
      print('‚ùå Failed to initialize with default config: $e2');
    }
  }

  runApp(
    MultiProvider(
      providers: [
        Provider.value(value: storageService),
        Provider.value(value: sheetsService),
        Provider.value(value: rssService),
        Provider.value(value: analysisService),
        Provider.value(value: bettingService),
        Provider.value(value: telegramService),
      ],
      child: const MyApp(),
    ),
  );
}